create table public.posts (
    id uuid not null,
    title text not null,
    description text null,
    options jsonb[] not null,
    category text not null,
    constraint posts_pkey primary key (id),
    constraint posts_category_fkey foreign key (category) references categories (name) on update restrict on delete restrict,
    constraint posts_options_check check (validate_options (options)),
    constraint posts_title_check check (
      (
        (length(title) >= 1)
        and (length(title) <= 50)
      )
    )
  ) tablespace pg_default;
alter table public.posts enable row level security;

create or replace function public.validate_options(options jsonb[])
returns boolean
language plpgsql
as $$
begin

    if array_length(options, 1) < 2 or array_length(options, 1) > 15 then
      raise exception 'Options array length must be between 2 and 15';
    end if;

    if exists (
      select 1
      from unnest(options) as element
      where element is null
      or not element ? 'text' 
      or (element ->> 'text') is null
      or length(element ->> 'text') < 1 or length(element ->> 'text') > 20
      or (select count(*) from jsonb_object_keys(element)) > 1
    ) then
      raise exception 'Options element has something wrong';
    end if;

    return true;

end;
$$;

-- post 테이블 정책 1
create policy "Give insert access to authenticated users"
on public.posts 
for insert
to authenticated 
with check (true);
-- post 테이블 정책 2
create policy "Give select access to all users"
on public.posts 
for select
to public 
using (true);
-- post 테이블 정책 3
create policy "User can delete info of their own post"
on public.posts 
for delete
to authenticated 
using (auth.uid() = posts.user_id);

-- category 테이블
create table public.categories (
    id integer generated by default as identity,
    name text not null,
    constraint categories_pkey primary key (id),
    constraint categories_name_key unique (name)
  ) tablespace pg_default;
alter table public.categories enable row level security;

-- category 테이블 정책
create policy "Give select access to all users"
on public.categories 
for select
to public 
using (true);